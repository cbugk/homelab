# Documentation of preperation of Windows10 Workstation
# x86 or x64 specific steps will be specified when necessary
# A laptop is assumed (due to equipment available). A consideration, not a requirement. 
# Kudos to all those MPV's on the internet for voluntarily blogging, forumming, and more.

####------------------------[ Installation and Bare Minimum ]-------------------------####
* This section is heavier on suggestions than their practice. You need to get your hands
dirty to survive this procedure. Better take backup of every file you care on an external
hdd (or another computer), if not a vault on a deserted island. Keep the hdd non-plugged
and double check your backup, I have fallen for shallow copying before.

# Windows10 .iso image [ https://www.microsoft.com/en-us/software-download/windows10ISO ]
    * Download only from Microsoft
    * There is a trick, if website detects OS as windows, does not provide .iso image
    (directs to iso creater tool) An easy work around is to download onto an Android
    phone, and copy it over. (Emulators, hackintosh, or browser settings/extensions are
    at your service as well)

# Prepare Installation Medium
    [ Borrow a Windows machine, if you can ]
    # Rufus [ https://rufus.ie ]
        * Personal favorite, UI and options have evolved over the years. Youtube
        tutorials are a good start. Be mindful of physically detaching  disks or double
        checking destination disk is important. Also check MBR/GPT and BIOS/UEFI out, if
        you are not exposed to those.
    # balenaEtcher [not suggested]
        * Although, it is like an intuitive GUI for dd, and is cross-platform. I do not
        prefer Etcher for Windows disks out of past experience. A catch was not being
        able to convert a disk between MBR and GPT (your milage may vary)
        * Though it is, to the least, useful for Raspberry and Proxmox.
    # DVD Burner:
        * Any experience on DVDs for installation is forgotten at this point, let alone
        their irrelevance for laptops. Nevertheless, it is still an option, especially
        easiest on a non-Windows environment I suppose. Google it.
    # Notes:
        I have not succeded, in the past, with neither of linux tools to create Windows7+
        usb installers. Any tried suggestions are welcome. 

# Set/Select Boot Order
    * Many tutorials on this. Worst case scenario, try ESC, or DELETE, or each function
    key (F2, F8, F10, F12 mainly) on bootup, rigorously. You may need to hold "fn" key on
    never laptops. Google it for the brand. Never come across model specific info.
    * Go for MBR+BIOS and GPT+UEFI for sanity, although other combinations are possible.
    For UEFI, turn "Secure Boot" off, if dual booting "Fast Boot" as well. You will
    probably need to set administrator password to access those functionalities.
    * You can re-enable those after installation if you wish, also adding permanent keys
    for non-Windows OS'es while you are at it (have not needed/done yet).

# Install Windows10
    * Personally, I suggest setting an offline account (unplug ethernet, withdraw from
    wifi), and disabling every possible toggle for private data usage, Cortana, etc.
    * Other than that, [ (1024 * DESIRED_GBs) + 16 + 100 + 505 ] resulted in an integer
    number of capacity for me (you may need to experiment).
    * Remove USB stick just in case when rebooted, however, installer is smart enough
    generally.
    * Lastly, dual booting with linux has proven useful in the past, a couple times.
    Leave 20-36 GB free space at the end, if you can. (Windows Subsystem for Linux just
    is not the same)

# After First Boot
    [ Optional - Suggested ]
    * After installation do Windows Update.
        Restart
    * After second boot, go and install any lacking drivers
        Restart
    * After third boot, go on and do your thing. Some I do are:
        RightClick "Taskbar" ->
            Search -> Set "Hidden"
            Disable "Show Cortana button"
            Enable "Show touch keyboard button"
        File Explorer -> RightClick "Quick Access" -> Options -> Open File Explorer to ->
            Select "This PC"
        Control Panel (classic 9 branches layout) ->
            Appereance and Personalization -> File Explorer Options -> View ->
                Disable "Hide extensions for known file types"
                Enable "Show hidden files, folders and drives"
            Clock and Region -> Region ->
                Set "yyyy-MM-dd"
                Set "HH:mm"
            User Accounts -> User Accounts -> Change User Account Control Settings ->
                Set one lower than default (disables dimming desktop)
            System and Security -> System -> System protection (left pane) -> 
                Computer Name -> Change ->
                    Set "Computer name"
                    More -> Set "Primary DNS suffix of this computer"
                Advanced -> Environment Variables -> System Variables ->
                    LeftClick "Path" -> Edit -> New ->
                        Add full path unified directory for manual executable installs
            Hardware and Sound -> Power Options -> Choose what the power button does ->
                Set everything to "Do Nothing"
                Change settings that are currently unavailable ->
                    Disable "Turn on fast startup" [Optional - for dual booting]
        Restart

# NTP Client
    [Optional - Suggested if dual booting]
    * Due to hardware clock being UTC for Unix and local-time for DOS families, set an
    ntp client.
    # TimeSyncTool [ http://www.timesynctool.com/ ]
         I have come accross TimeSync on a Stackoverflow page, alternatively regex
        solutions exist. I do not find those feasable in my case, with extensive
        formatting I do.

# Browser of Choice
    [ Optional ]
    * My understanding is, Chrome wololo'ed every other compatitor apart from Firefox. I
    prefer the latter, personally.
    # Firefox
    # Chromium derivatives (Edge pre-installed)
    # Dead/Lacking browsers (Explorer pre-installed)

# Package manager
    [ Assumed for later on ]
    * It is a relief to have a capable enough package manager, also might prove useful for
    future automation. Chocolatey is the current leader I believe. Follow their docs. You
    can install both, but I will try to stick to choco from now on.
    # Chocolatey [ https://chocolatey.org/ ]
        * Perform administrative installation. v0.10.15 installed.
        * use "-y" flag, if you do not want to interact manually.
        * I choose to run all scripts at the end. This bothers me.
    # Scoop [ https://scoop.sh/ ] [ Optional ]
        * Not supported here yet, out of preference.
        * Actually feels more like apt. So, sad to leave it behind.

# 'Copy-Paste'ble Directory tree
    [ Optional - Suggested ]
    * Optionally, you are suggested to create a directory hierarchy to store every file
    that you care. The idea behind being, you can backup that folder recursively, use
    version control on it if you will, but most importantly take it away (relatively)
    FAST before wiping the disk or reinstalling an OS. My two cents, after chronic OS
    re-installs for years.   

####------------------------[ There Is No Place Like Home ]---------------------------####
* Let's make windows feel more Unix style. Obviously another personal preference.

# Boot Manager
    * As I will be triple booting Windows10Pro, Xubuntu, Debian10+Proxmox6; I will need
    some way of making sure I boot whatever OS was last booted. Also make sure I can
    easily repair it, let alone an easy install. Since Windows8.1 I have the cure.
    # rEFInd [ https://www.rodsbooks.com/refind/]
        * rEFInd is my preffered "boot loader loader", you should read about it on
        official site first. Also mind it poses a security risk, unless specifically
        secured via config. I have yet to need such level of security for non-production
        use. Please only use on a PC (in literal sense)
        Installation:
            Getting rEFInd [ https://www.rodsbooks.com/refind/getting.html ]
                * Download USB flash drive image to try out first
                * Download binary, unzip and cd into "refind-bin-0.12.0\refind-bin-0.12.0"
                You should see "refind" and many other folders.
            Copying to EFI: [ https://www.rodsbooks.com/refind/installing.html#windows ]
                Run PowerShell as administrator and cd into aforementioned directory          
                PS(Admin) - C:\Users\cbugra\Downloads\refind-bin-0.12.0\refind-bin-0.12.0\
                    mountvol S: /S
                PS(Admin) - C:\Users\cbugra\Downloads\refind-bin-0.12.0\refind-bin-0.12.0\
                    xcopy /E refind S:\EFI\refind\
                PS(Admin) - C:\Users\cbugra\Downloads\refind-bin-0.12.0\refind-bin-0.12.0\
                    S:
                PS(Admin) - S:\
                    cd EFI\refind
                PS(Admin) - S:\EFI\refind\
                    rm -r *ia32*   # remove x86 files
                PS(Admin) - S:\EFI\refind\
                    rm -r *aa64*   # remove arm64 files
                PS(Admin) - S:\EFI\refind\
                    rename refind.conf-sample refind.conf
            Piggy-backing Method
                * I like being able to recover rEFInd after a disaster, just by copying a
                backup file (on linux generally). Thus merge "S:\EFI\refind" directory
                with "S:\EFI\Boot", and backtup ".efi" files. You may instead stick to
                original tutorial instead.
                PS(Admin) - S:\EFI\refind\
                    cp -r S:\EFI\refind\* S:\EFI\Boot\
                PS(Admin) - S:\EFI\refind\
                    cd S:\EFI\Boot
                PS(Admin) - S:\EFI\Boot\
                    rm -r S:\EFI\refind
                PS(Admin) - S:\EFI\Boot\
                    cp ./refind_x64.efi ./refind_x64.efi.backup
                PS(Admin) - S:\EFI\Boot\
                    mv ./bootx64.efi ./bootx64.efi.backup
                PS(Admin) - S:\EFI\Boot\
                   mv ./refind_x64.efi ./bootx64.efi
                * This last command should bring rEFInd back, bootup a linux live USB and
                cd into EFI partition (e.g. /dev/sda1), mounted generally on /boot/efi/ on
                Debian.
            Restart to check

# Shell and Terminal
    # PowerShell Core 7
        PS(Admin) - C:\Windows\system32\
            choco install -y powershell-core
    # Alacritty [ Optional ]
        * Cross platform, and performance oriented. Time will tell.
        PS(Admin) - C:\Windows\system32\
            choco install -y alacritty
        * Set compatibility settings to run as administrator [ Optional ]
        [ https://stackoverflow.com/questions/2313045/how-to-set-run-this-program-as-an-administrator-programmatically ]
        For Current User
        PS(Admin) - C:\Windows\system32\
            reg.exe Add "HKCU\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers" /v "C:\Program Files\Alacritty\alacritty.exe" /d "RUNASADMIN"
            reg.exe Delete "HKCU\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers" #to delete
        For System-wide
        PS(Admin) - C:\Windows\system32\
            reg.exe Add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers" /v "C:\Program Files\Alacritty\alacritty.exe" /d "RUNASADMIN"
            reg.exe Delete "HKLM\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"  #to delete
        * Set default shell to Cygwin [ Optional ]
        PS(Admin) - C:\Users\cbugra\AppData\Roaming\  (aka %APPDATA%)
            mkdir alacritty && cd alacritty
        PS(Admin) - C:\Users\cbugra\AppData\Roaming\alacritty\
            wget https://raw.githubusercontent.com/alacritty/alacritty/master/alacritty.yml
        Edit "shell.program" as follows (verbatim concerning quotes and back-slashes):
            shell:
              program: "C\\ProgramData\\chocolatey\\bin\\Cygwin.exe"
    # Cygwin
        * Initially GitBash was enough, it actually still is. I just want to be able to
        add a lacking unix tool easily afterwards. Personal preferences again.
        PS(Admin) - C:\Windows\system32\
            choco install -y cygwin cyg-get
        * Set Windows Home directory as home for Cygwin too
        [ https://superuser.com/questions/345180/install-vim-in-cygwin ]
        CW(Admin) - cbugra@workstation:/home/cbugra/
            echo "db_home: /%H" >> /etc/nsswitch.conf && exit
        * Note that "/cygdrive/c" is "C:" and forward-slashes all the way thereon.
        * For a similar compatibility setting to Alacritty, use StartMenu shorcut:
        [ C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Cygwin\Cygwin Terminal ]
    # Git Bash [ Optional - Not Supported]
        * Sometimes, you may come accross GitBash or its notation rather than Cygwin's
        (e.g. "/c/Users/" vs "/cygdrive/c/Users").
* From now on DEFAULT SHELL is CYGWIN run on top of ALACRITTY as ADMINISTRATOR (unless
otherwise specified).
* There seems to be a bug of Cygwin getting killed via ^C (Ctrl+C). So until it is solved,
regular Cygwin console will be used.

# Assumed Tools
    PS(Admin) - C:\Windows\system32\
        choco install -y wget curl vim
# Remote Access - Cross Platform
    # OpenSSH Server
    [ https://openterprise.it/2020/03/install-openssh-under-windows-10-and-set-powershell-as-default-shell/ ]
        * Check current versions
        PS(Admin) - C:\Windows\system32\
            Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'
        * Install client (should already be installed)
        PS(Admin) - C:\Windows\system32\
            Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
        * Install server
        PS(Admin) - C:\Windows\system32\
            Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
        * Start server
        PS(Admin) - C:\Windows\system32\
            Start-Service sshd
        * Enable autostart
        PS(Admin) - C:\Windows\system32\
            Set-Service -Name sshd -StartupType 'Automatic'
        * Check firewall
        PS(Admin) - C:\Windows\system32\
            Get-NetFirewallRule -Name *ssh*
        * Set Cygwin as default shell (use "pwsh.exe", "cmd.exe", "bash.exe" for others inside Cygwin)
        * Substitude your shell executable's path for -Value parameter.
        PS(Admin) - C:\Windows\system32\
            New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\ProgramData\chocolatey\bin\Cygwin.exe" -PropertyType String -Force
        * Check is sshd is running
        PS(Admin) - C:\Windows\system32\
            Get-Service sshd   # Start-Service sshd if not
        * Try entering into local machine, if you see Cygwin shell, awesome.
        PS(Admin) - C:\Windows\system32\
            ssh localhost
        * Restrict to Public Key authentication
            TODO - Better Stop-Service outside homelab untill then
# Git
    * May find "--global" flag useful, if not using several accounts simultaneously.
    * My personal accounts have my real full name, a bit vanilla I know.
    CW(Admin) - cbugra@workstation:/cygdrive/c/Users/cbugra/
        choco install -y git
    CW(Admin) - cbugra@workstation:/cygdrive/c/Users/cbugra/
        git config user.name "insert_your_name_here"
    CW(Admin) - cbugra@workstation:/cygdrive/c/Users/cbugra/
        git config user.email "insert_your_anonymous_github_email_here"
    # For Github
        Settings -> Emails -> Enable "Keep my email address private" (written just under)
    # For Gitlab
        Settings -> Profile -> Commit Email -> Use a private email ->
            Update Profile Settings
# Editor of Choice
    # Vim [ Suggested ]
    CW(Admin) - cbugra@workstation:/cygdrive/c/Users/cbugra/
        choco install -y vim  #installs yet vim not working within Cygwin
    # Nano [ Suggested ]
    CW(Admin) - cbugra@workstation:/cygdrive/c/Users/cbugra/
        choco install -y nano
    # Not Supported (Yet)
        * Emacs (personal preference, Vim-Emacs war is out of scope of this document)
        * Notepad (good for trivial editing, already installed)
        * Notepad++ (not cross-platform, might cause line break problems)
        * VSCode (heavy-weight editor, light-weight IDE replacement)
        * Atom (never used before, heard similar to VSCode)
