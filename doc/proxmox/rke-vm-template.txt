# Documentation of creating a template for base RKE vms

#-Prerequisite(s):
homelab/proxmox/ubuntu_20.04_cloud-init_template.txt

#-Source(s):
#   [tag:brandstetter]  https://norocketscience.at/deploy-proxmox-virtual-machines-using-cloud-init/
#   [tag:oliveira]      https://medium.com/swlh/provision-proxmox-vms-with-terraform-quick-and-easy-5ad1975df1de
#   [tag:dockerce]      https://docs.docker.com/engine/install/ubuntu/
#   [tag:rke-install]   https://rancher.com/docs/rke/latest/en/installation/
#   [tag:rke-prep-os]   https://rancher.com/docs/rke/latest/en/os/
#   [tag:kubevirt-crio] https://kubevirt.io/2019/KubeVirt_k8s_crio_from_scratch.html

#-Environment:
#   Workstation: 32-bit Windows10Pro Netbook
#     Shell: Git Bash (Admin)
#     User: cbugra@workstation
#   Proxmox 6.2 Cluster
#     Nodes: [ apollo, hermes, triton ]
#     Domain: pve.cbk.lab
#     Storage: [ CephFS: cephfs, RADOS: cephrds ]
#     VM: [ id: 9000, template: true, name: "ubuntu-2004-cloudinit-template" ]

#-End-Result:
#   VM for RKE node, with required packages/binaries installed and virtual hardware specified

#-Procedure----------

# Create cluster-wide public key directory
#  cbugra@workstation:/c/ssh_keys/rke_vm/
     ssh root@hermes.pve.cbk.lab mkdir -p /etc/pve/pub_keys

# Upload ssh public key onto cluster-wide directory
#  cbugra@workstation:/c/ssh_keys/rke_vm/
     scp ./rke_vm.pub root@hermes.pve.cbk.lab:/etc/pve/pub_keys/

# Enter into the node
#  cbugra@workstation:/c/ssh_keys/rke_vm/
     ssh root@hermes.pve.cbk.lab

  # Clone template to further configure (full clone)
  #  root@hermes:/root/
       qm clone 9000 9100 --name rke-base-template --full 1

  # Set ssh authentication from uploaded public key
  #  root@hermes:/root/
       qm set 9100 --sshkey /etc/pve/pub_keys/rke_vm.pub

  # Change Hardware as required/desired
  #  root@hermes:/root/
       qm set 9100 --cores 2 --memory 6144

  # Optionally set static-ip
  #  root@hermes:/root/
       qm set 9100 --ipconfig0 ip=192.168.1.91/24,gw=192.168.1.1

  # Note setting default user requires snippet on a volume
  # Not configured as of now, default user is "ubuntu"

  # Start VM (not a template yet)
  # You are advised to check options on GUI beforehand, update as you wish via GUI/CLI
  #  root@hermes:/root/
       qm start 9100

  # Exit from the node
  #  root@hermes:/root/
       exit

# Enter into vm
#  cbugra@workstation:/c/ssh_keys/rke_vm/
     ssh -i ./rke_vm.ssh ubuntu@192.168.1.91

  # Obligatory apt update/upgrade
  #  ubuntu@rke-base-template:/home/ubuntu/
       sudo apt update && sudo apt upgrade

  # Install Qemu Agent
  #  ubuntu@rke-base-template:/home/ubuntu/
       sudo apt install qemu-guest-agent

  # Install DockerCE [source:dockerce]
    # Setup repository
    #  ubuntu@rke-base-template:/home/ubuntu/
         sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
    #  ubuntu@rke-base-template:/home/ubuntu/
         curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    #  ubuntu@rke-base-template:/home/ubuntu/
         sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    # Install packages (might need to install a specific version)
    #  ubuntu@rke-base-template:/home/ubuntu/
         sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

  # Prepare RKE to installation [source:rke-prep-os,kubevirt-crio]
    #  ubuntu@rke-base-template:/home/ubuntu/
         sudo usermod -aG docker $USER
    # Activate and enable modules on kernel
    # following modules could not be found, thus removed
    # (nt_conntrack_ipv4, nf_nat_ipv4), nf_nat_masquerade_ipv4) 
    #  ubuntu@rke-base-template:/home/ubuntu/
         sudo su
    #  root@rke-base-template:/home/ubuntu/
         for module in br_netfilter ip6_udp_tunnel ip_set ip_set_hash_ip ip_set_hash_net iptable_filter iptable_nat iptable_mangle iptable_raw nf_conntrack_netlink nf_conntrack nf_defrag_ipv4 nf_nat nfnetlink udp_tunnel veth vxlan x_tables xt_addrtype xt_conntrack xt_comment xt_mark xt_multiport xt_nat xt_recent xt_set  xt_statistic xt_tcpudp;
         do
           if ! lsmod | grep -q $module; then
             modprobe $module && echo $module > /etc/modules-load.d/$module.conf;
           fi;
         done
    #  root@rke-base-template:/home/ubuntu/
         cat > /etc/sysctl.d/99-rke.conf << EOF
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
    #  root@rke-base-template:/home/ubuntu/
         echo "AllowTcpForwarding yes" >> /etc/ssh/sshd_config
    #  root@rke-base-template:/home/ubuntu/
         cat /dev/null > ~/.bash_history && history -c && exit

    # Download RKE binary
    # Check version from [ https://github.com/rancher/rke/releases ]
    #  ubuntu@rke-base-template:/home/ubuntu/
         wget https://github.com/rancher/rke/releases/download/v1.2.0/rke_linux-amd64

    # Rename, make executable, and move into Path
    #  ubuntu@rke-base-template:/home/ubuntu/
         mv ./rke_linux-amd64 ./rke && chmod +x ./rke && sudo mv ./rke /usr/local/bin/

    # Exit from vm
    #  ubuntu@rke-base-template:/home/ubuntu/
         cat /dev/null > ~/.bash_history && history -c && exit

# Enter into node
#  cbugra@workstation:/c/ssh_keys/rke_vm/
     ssh root@hermes.pve.cbk.lab
  # Enable qemu agent (installed earlier)
  #  root@hermes:/root/
       qm set 9100 --agent 1
  # Shutdown vm before templating
  #  root@hermes:/root/
       qm shutdown 9100
  # Convert into template
  #  root@hermes:/root/ 
       qm template 9100

  # Exit from node
  #  root@hermes:/root/
       exit

#-Procedure-End------
